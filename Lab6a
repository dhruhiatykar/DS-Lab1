#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

struct Node* createLinkedList() {
    struct Node* head = NULL;
    int n, value;
    printf("Enter number of elements to insert in the list: ");
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
        printf("Enter value for node %d: ", i + 1);
        scanf("%d", &value);
        struct Node* newNode = createNode(value);
        if (head == NULL) {
            head = newNode;
        } else {
            struct Node* temp = head;
            while (temp->next != NULL) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    return head;
}

void displayList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    
    struct Node* temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void sortList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Cannot sort.\n");
        return;
    }
    
    struct Node* i = head;
    struct Node* j = NULL;
    int temp;
    
    while (i != NULL) {
        j = i->next;
        while (j != NULL) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
            j = j->next;
        }
        i = i->next;
    }
}

struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    head = prev;
    return head;
}

struct Node* concatenateLists(struct Node* head1, struct Node* head2) {
    if (head1 == NULL) {
        return head2;
    }
    
    struct Node* temp = head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    
    temp->next = head2;
    return head1;
}

int main() {
    struct Node* head1 = NULL;
    struct Node* head2 = NULL;
    int choice, value;

    while (1) {
        printf("\n1. Create Linked List 1\n2. Create Linked List 2\n3. Sort List 1\n4. Reverse List 1\n5. Concatenate Lists\n6. Display List 1\n7. Display List 2\n8. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                head1 = createLinkedList();
                break;
            case 2:
                head2 = createLinkedList();
                break;
            case 3:
                sortList(head1);
                break;
            case 4:
                head1 = reverseList(head1);
                break;
            case 5:
                head1 = concatenateLists(head1, head2);
                break;
            case 6:
                displayList(head1);
                break;
            case 7:
                displayList(head2);
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}
