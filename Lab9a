#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 50

struct Queue {
    int items[MAX];
    int front, rear;
};

// Function to initialize a queue
void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
bool isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Function to check if the queue is full
bool isFull(struct Queue* q) {
    return q->rear == MAX - 1;
}

// Function to enqueue an element
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full.\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}

// Function to dequeue an element
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return -1;
    }
    int item = q->items[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return item;
}

// Function to perform BFS traversal
void bfs(int graph[MAX][MAX], int start, int n) {
    bool visited[MAX] = {false};
    struct Queue q;
    initQueue(&q);

    visited[start] = true;
    enqueue(&q, start);

    printf("BFS Traversal starting from node %d: ", start);
    while (!isEmpty(&q)) {
        int node = dequeue(&q);
        printf("%d ", node);

        for (int i = 0; i < n; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int n, start;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    int graph[MAX][MAX];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the starting node for BFS traversal: ");
    scanf("%d", &start);

    bfs(graph, start, n);

    return 0;
}
